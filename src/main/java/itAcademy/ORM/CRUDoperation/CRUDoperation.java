package itAcademy.ORM.CRUDoperation;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.LinkedHashMap;
import java.util.Set;
import java.util.stream.Collectors;

public class CRUDoperation {
    private Connection connection;
    private Class idClass = null;

    public static void setField(Object object, String fieldName, Object value) throws IllegalAccessException, ReflectionException {
        boolean noField = true;
        for (Field field : object.getClass().getDeclaredFields()) {
            if (field.getName().equals(fieldName)) {
                field.setAccessible(true);
                field.set(object, value);
                noField = false;
            }
        }
        if (noField) {
            throw new ReflectionException("No field");
        }
    }

    public static Object getFieldValue(Object object, String fieldName) throws IllegalAccessException, ReflectionException {
        for (Field field : object.getClass().getDeclaredFields()) {
            if (field.getName().equals(fieldName)) {
                field.setAccessible(true);
                return field.get(object);

            }
        }
        throw new ReflectionException("No field");
    }

    public Object insert(Object obj) throws IllegalAccessException, SQLException, ReflectionException, NoSuchMethodException, InvocationTargetException {

        LinkedHashMap<String, Object> fields = new LinkedHashMap<>();
        boolean autoGenerated = false;
        String autoGeneratedField = null;
        for (Field field : obj.getClass().getDeclaredFields()) {
            if (!java.lang.reflect.Modifier.isStatic(field.getModifiers())) {
                boolean noAnnotation = true;
                for (Annotation annotation : field.getDeclaredAnnotations())

                    if (annotation.annotationType().equals(idClass)) {
                        Boolean autoIncremental;

                        if (getFieldValue(obj, field.getName()) == null) {
                            Class noparams[] = {};
                            Class cls = annotation.getClass();
                            Method method = cls.getDeclaredMethod("autoIncremental", noparams);
                            autoIncremental = (Boolean) method.invoke(annotation, null);
                        } else {
                            autoIncremental = false;
                        }

                        if (autoIncremental) {
                            noAnnotation = false;
                            autoGenerated = true;
                            autoGeneratedField = field.getName();
                        }
                    }

                if (noAnnotation) {
                    field.setAccessible(true);
                    fields.put(field.getName(), field.get(obj));
                }
            }
        }

        Set<String> fieldsSet = fields.keySet();
        String names = fieldsSet.stream().collect(Collectors.joining(","));
        String values = fieldsSet.stream().map(it -> "?").collect(Collectors.joining(","));

        String sql = "insert into " + obj.getClass().getSimpleName() + "(" + names + ") values (" + values + ")";
        return obj;
    }
}
